// Generated by Dagger (https://google.github.io/dagger).
package com.app.thenhpattern.di.modules;

import com.app.thenhpattern.MyApplication;
import com.app.thenhpattern.model.APIServices;
import com.app.thenhpattern.model.remote.DataSource;
import com.app.thenhpattern.util.SessionManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideTaskRepositoryFactory implements Factory<DataSource> {
  private final AppModule module;

  private final Provider<APIServices> apiServicesProvider;

  private final Provider<SessionManager> sessionManagerProvider;

  private final Provider<MyApplication> applicationProvider;

  public AppModule_ProvideTaskRepositoryFactory(
      AppModule module,
      Provider<APIServices> apiServicesProvider,
      Provider<SessionManager> sessionManagerProvider,
      Provider<MyApplication> applicationProvider) {
    this.module = module;
    this.apiServicesProvider = apiServicesProvider;
    this.sessionManagerProvider = sessionManagerProvider;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public DataSource get() {
    return provideInstance(
        module, apiServicesProvider, sessionManagerProvider, applicationProvider);
  }

  public static DataSource provideInstance(
      AppModule module,
      Provider<APIServices> apiServicesProvider,
      Provider<SessionManager> sessionManagerProvider,
      Provider<MyApplication> applicationProvider) {
    return proxyProvideTaskRepository(
        module, apiServicesProvider.get(), sessionManagerProvider.get(), applicationProvider.get());
  }

  public static AppModule_ProvideTaskRepositoryFactory create(
      AppModule module,
      Provider<APIServices> apiServicesProvider,
      Provider<SessionManager> sessionManagerProvider,
      Provider<MyApplication> applicationProvider) {
    return new AppModule_ProvideTaskRepositoryFactory(
        module, apiServicesProvider, sessionManagerProvider, applicationProvider);
  }

  public static DataSource proxyProvideTaskRepository(
      AppModule instance,
      APIServices apiServices,
      SessionManager sessionManager,
      MyApplication application) {
    return Preconditions.checkNotNull(
        instance.provideTaskRepository(apiServices, sessionManager, application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
