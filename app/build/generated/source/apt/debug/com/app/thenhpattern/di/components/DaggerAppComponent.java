// Generated by Dagger (https://google.github.io/dagger).
package com.app.thenhpattern.di.components;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import com.app.thenhpattern.MyApplication;
import com.app.thenhpattern.di.modules.ActivityBuilderModule_ContributeAuthActivty;
import com.app.thenhpattern.di.modules.ActivityBuilderModule_ContributeMainActivty;
import com.app.thenhpattern.di.modules.ActivityBuilderModule_ContributePagerActivity;
import com.app.thenhpattern.di.modules.AppModule;
import com.app.thenhpattern.di.modules.AppModule_ProvideMockRepositoryFactory;
import com.app.thenhpattern.di.modules.AppModule_ProvideSharedPreferencesFactory;
import com.app.thenhpattern.di.modules.AppModule_ProvideTSessionManagerFactory;
import com.app.thenhpattern.di.modules.FragmentBuilders.AuthBuilderModule_ContributeForgetPasswordFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.AuthBuilderModule_ContributeLoginFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.AuthBuilderModule_ContributeRegisterFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.AuthBuilderModule_ContributeSplashFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.AuthBuilderModule_ContributeVerificationFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.MainBuilderModule_ContributeChangePasswordFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.MainBuilderModule_ContributeHomeFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.MainBuilderModule_ContributeJobFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.MainBuilderModule_ContributeNotificationsFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.MainBuilderModule_ContributeProfileFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.MainBuilderModule_ContributeSettingFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.MainBuilderModule_ContributeWebViewFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeCenterFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeChangePasswordFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeHomeFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeJobFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeLeftFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeNotificationsFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeProfileFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeRightFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeSettingFragment;
import com.app.thenhpattern.di.modules.FragmentBuilders.PagerBuilderModule_ContributeWebViewFragment;
import com.app.thenhpattern.model.remote.DataSource;
import com.app.thenhpattern.util.BaseActivity_MembersInjector;
import com.app.thenhpattern.util.BaseFragment_MembersInjector;
import com.app.thenhpattern.util.SessionManager;
import com.app.thenhpattern.util.ViewModelFactory;
import com.app.thenhpattern.view.AuthActivity;
import com.app.thenhpattern.view.MainActivity;
import com.app.thenhpattern.view.PagerActivity;
import com.app.thenhpattern.view.auth.ForgetPasswordFragment;
import com.app.thenhpattern.view.auth.LoginFragment;
import com.app.thenhpattern.view.auth.RegisterFragment;
import com.app.thenhpattern.view.auth.SplashFragment;
import com.app.thenhpattern.view.auth.SplashFragment_MembersInjector;
import com.app.thenhpattern.view.auth.VerificationFragment;
import com.app.thenhpattern.view.main.HomeFragment;
import com.app.thenhpattern.view.main.JobFragment;
import com.app.thenhpattern.view.main.NotificationsFragment;
import com.app.thenhpattern.view.main.SettingFragment;
import com.app.thenhpattern.view.main.setting.ChangePasswordFragment;
import com.app.thenhpattern.view.main.setting.ProfileFragment;
import com.app.thenhpattern.view.main.setting.WebViewFragment;
import com.app.thenhpattern.view.navigator.CenterFragment;
import com.app.thenhpattern.view.navigator.LeftFragment;
import com.app.thenhpattern.view.navigator.RightFragment;
import com.app.thenhpattern.viewmodel.AuthViewModel;
import com.app.thenhpattern.viewmodel.AuthViewModel_Factory;
import com.app.thenhpattern.viewmodel.MainViewModel;
import com.app.thenhpattern.viewmodel.MainViewModel_Factory;
import com.app.thenhpattern.viewmodel.PagerViewModel;
import com.app.thenhpattern.viewmodel.PagerViewModel_Factory;
import com.app.thenhpattern.viewmodel.auth.ForgetPasswordViewModel;
import com.app.thenhpattern.viewmodel.auth.ForgetPasswordViewModel_Factory;
import com.app.thenhpattern.viewmodel.auth.LoginViewModel;
import com.app.thenhpattern.viewmodel.auth.LoginViewModel_Factory;
import com.app.thenhpattern.viewmodel.auth.RegisterViewModel;
import com.app.thenhpattern.viewmodel.auth.RegisterViewModel_Factory;
import com.app.thenhpattern.viewmodel.auth.SplashViewModel;
import com.app.thenhpattern.viewmodel.auth.SplashViewModel_Factory;
import com.app.thenhpattern.viewmodel.auth.VerificationViewModel;
import com.app.thenhpattern.viewmodel.auth.VerificationViewModel_Factory;
import com.app.thenhpattern.viewmodel.main.HomeViewModel;
import com.app.thenhpattern.viewmodel.main.HomeViewModel_Factory;
import com.app.thenhpattern.viewmodel.main.JobViewModel;
import com.app.thenhpattern.viewmodel.main.JobViewModel_Factory;
import com.app.thenhpattern.viewmodel.main.NotificationViewModel;
import com.app.thenhpattern.viewmodel.main.NotificationViewModel_Factory;
import com.app.thenhpattern.viewmodel.main.SettingViewModel;
import com.app.thenhpattern.viewmodel.main.SettingViewModel_Factory;
import com.app.thenhpattern.viewmodel.main.setting.ChangePasswordViewModel;
import com.app.thenhpattern.viewmodel.main.setting.ChangePasswordViewModel_Factory;
import com.app.thenhpattern.viewmodel.main.setting.ProfileViewModel;
import com.app.thenhpattern.viewmodel.main.setting.ProfileViewModel_Factory;
import com.app.thenhpattern.viewmodel.main.setting.WebviewViewModel;
import com.app.thenhpattern.viewmodel.main.setting.WebviewViewModel_Factory;
import com.app.thenhpattern.viewmodel.navigator.CenterViewModel;
import com.app.thenhpattern.viewmodel.navigator.CenterViewModel_Factory;
import com.app.thenhpattern.viewmodel.navigator.LeftViewModel;
import com.app.thenhpattern.viewmodel.navigator.LeftViewModel_Factory;
import com.app.thenhpattern.viewmodel.navigator.RightViewModel;
import com.app.thenhpattern.viewmodel.navigator.RightViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent extends AppComponent {
  private Provider<ActivityBuilderModule_ContributeMainActivty.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilderModule_ContributeAuthActivty.AuthActivitySubcomponent.Builder>
      authActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilderModule_ContributePagerActivity.PagerActivitySubcomponent.Builder>
      pagerActivitySubcomponentBuilderProvider;

  private Provider<MyApplication> applicationProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<SessionManager> provideTSessionManagerProvider;

  private Provider<DataSource> provideMockRepositoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(3)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(AuthActivity.class, (Provider) authActivitySubcomponentBuilderProvider)
        .put(PagerActivity.class, (Provider) pagerActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilderModule_ContributeMainActivty.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilderModule_ContributeMainActivty.MainActivitySubcomponent.Builder
              get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.authActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilderModule_ContributeAuthActivty.AuthActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilderModule_ContributeAuthActivty.AuthActivitySubcomponent.Builder
              get() {
            return new AuthActivitySubcomponentBuilder();
          }
        };
    this.pagerActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilderModule_ContributePagerActivity.PagerActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilderModule_ContributePagerActivity.PagerActivitySubcomponent.Builder
              get() {
            return new PagerActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            AppModule_ProvideSharedPreferencesFactory.create(
                builder.appModule, applicationProvider));
    this.provideTSessionManagerProvider =
        DoubleCheck.provider(
            AppModule_ProvideTSessionManagerFactory.create(
                builder.appModule, provideSharedPreferencesProvider));
    this.provideMockRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideMockRepositoryFactory.create(
                builder.appModule, applicationProvider, provideTSessionManagerProvider));
  }

  @Override
  public void inject(MyApplication arg0) {
    injectMyApplication(arg0);
  }

  private MyApplication injectMyApplication(MyApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private MyApplication application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(MyApplication.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(MyApplication application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilderModule_ContributeMainActivty.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuilderModule_ContributeMainActivty.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeMainActivty.MainActivitySubcomponent {
    private Provider<MainBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder>
        homeFragmentSubcomponentBuilderProvider;

    private Provider<MainBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder>
        jobFragmentSubcomponentBuilderProvider;

    private Provider<
            MainBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder>
        settingFragmentSubcomponentBuilderProvider;

    private Provider<
            MainBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder>
        profileFragmentSubcomponentBuilderProvider;

    private Provider<
            MainBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder>
        webViewFragmentSubcomponentBuilderProvider;

    private Provider<
            MainBuilderModule_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
                .Builder>
        changePasswordFragmentSubcomponentBuilderProvider;

    private Provider<
            MainBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
                .Builder>
        notificationsFragmentSubcomponentBuilderProvider;

    private MainViewModel_Factory mainViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(7)
          .put(HomeFragment.class, (Provider) homeFragmentSubcomponentBuilderProvider)
          .put(JobFragment.class, (Provider) jobFragmentSubcomponentBuilderProvider)
          .put(SettingFragment.class, (Provider) settingFragmentSubcomponentBuilderProvider)
          .put(ProfileFragment.class, (Provider) profileFragmentSubcomponentBuilderProvider)
          .put(WebViewFragment.class, (Provider) webViewFragmentSubcomponentBuilderProvider)
          .put(
              ChangePasswordFragment.class,
              (Provider) changePasswordFragmentSubcomponentBuilderProvider)
          .put(
              NotificationsFragment.class,
              (Provider) notificationsFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>>
        getMapOfClassOfAndProviderOfViewModel() {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(
          MainViewModel.class, (Provider) mainViewModelProvider);
    }

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.homeFragmentSubcomponentBuilderProvider =
          new Provider<
              MainBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder>() {
            @Override
            public MainBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder get() {
              return new MBM_CHF_HomeFragmentSubcomponentBuilder();
            }
          };
      this.jobFragmentSubcomponentBuilderProvider =
          new Provider<MainBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder>() {
            @Override
            public MainBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder get() {
              return new MBM_CJF_JobFragmentSubcomponentBuilder();
            }
          };
      this.settingFragmentSubcomponentBuilderProvider =
          new Provider<
              MainBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder>() {
            @Override
            public MainBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder
                get() {
              return new MBM_CSF_SettingFragmentSubcomponentBuilder();
            }
          };
      this.profileFragmentSubcomponentBuilderProvider =
          new Provider<
              MainBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder>() {
            @Override
            public MainBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder
                get() {
              return new MBM_CPF_ProfileFragmentSubcomponentBuilder();
            }
          };
      this.webViewFragmentSubcomponentBuilderProvider =
          new Provider<
              MainBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder>() {
            @Override
            public MainBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder
                get() {
              return new MBM_CWVF_WebViewFragmentSubcomponentBuilder();
            }
          };
      this.changePasswordFragmentSubcomponentBuilderProvider =
          new Provider<
              MainBuilderModule_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
                  .Builder>() {
            @Override
            public MainBuilderModule_ContributeChangePasswordFragment
                    .ChangePasswordFragmentSubcomponent.Builder
                get() {
              return new MBM_CCPF_ChangePasswordFragmentSubcomponentBuilder();
            }
          };
      this.notificationsFragmentSubcomponentBuilderProvider =
          new Provider<
              MainBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
                  .Builder>() {
            @Override
            public MainBuilderModule_ContributeNotificationsFragment
                    .NotificationsFragmentSubcomponent.Builder
                get() {
              return new MBM_CNF_NotificationsFragmentSubcomponentBuilder();
            }
          };
      this.mainViewModelProvider =
          MainViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
      return instance;
    }

    private final class MBM_CHF_HomeFragmentSubcomponentBuilder
        extends MainBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder {
      private HomeFragment seedInstance;

      @Override
      public MainBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(HomeFragment.class.getCanonicalName() + " must be set");
        }
        return new MBM_CHF_HomeFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(HomeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MBM_CHF_HomeFragmentSubcomponentImpl
        implements MainBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent {
      private HomeViewModel_Factory homeViewModelProvider;

      private MBM_CHF_HomeFragmentSubcomponentImpl(
          MBM_CHF_HomeFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                MainViewModel.class,
                (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider)
            .put(HomeViewModel.class, (Provider) homeViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MBM_CHF_HomeFragmentSubcomponentBuilder builder) {
        this.homeViewModelProvider =
            HomeViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);
      }

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class MBM_CJF_JobFragmentSubcomponentBuilder
        extends MainBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder {
      private JobFragment seedInstance;

      @Override
      public MainBuilderModule_ContributeJobFragment.JobFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(JobFragment.class.getCanonicalName() + " must be set");
        }
        return new MBM_CJF_JobFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(JobFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MBM_CJF_JobFragmentSubcomponentImpl
        implements MainBuilderModule_ContributeJobFragment.JobFragmentSubcomponent {
      private JobViewModel_Factory jobViewModelProvider;

      private MBM_CJF_JobFragmentSubcomponentImpl(MBM_CJF_JobFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                MainViewModel.class,
                (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider)
            .put(JobViewModel.class, (Provider) jobViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MBM_CJF_JobFragmentSubcomponentBuilder builder) {
        this.jobViewModelProvider =
            JobViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(JobFragment arg0) {
        injectJobFragment(arg0);
      }

      private JobFragment injectJobFragment(JobFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class MBM_CSF_SettingFragmentSubcomponentBuilder
        extends MainBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder {
      private SettingFragment seedInstance;

      @Override
      public MainBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SettingFragment.class.getCanonicalName() + " must be set");
        }
        return new MBM_CSF_SettingFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SettingFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MBM_CSF_SettingFragmentSubcomponentImpl
        implements MainBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent {
      private SettingViewModel_Factory settingViewModelProvider;

      private MBM_CSF_SettingFragmentSubcomponentImpl(
          MBM_CSF_SettingFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                MainViewModel.class,
                (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider)
            .put(SettingViewModel.class, (Provider) settingViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MBM_CSF_SettingFragmentSubcomponentBuilder builder) {
        this.settingViewModelProvider =
            SettingViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(SettingFragment arg0) {
        injectSettingFragment(arg0);
      }

      private SettingFragment injectSettingFragment(SettingFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class MBM_CPF_ProfileFragmentSubcomponentBuilder
        extends MainBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder {
      private ProfileFragment seedInstance;

      @Override
      public MainBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ProfileFragment.class.getCanonicalName() + " must be set");
        }
        return new MBM_CPF_ProfileFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ProfileFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MBM_CPF_ProfileFragmentSubcomponentImpl
        implements MainBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent {
      private ProfileViewModel_Factory profileViewModelProvider;

      private MBM_CPF_ProfileFragmentSubcomponentImpl(
          MBM_CPF_ProfileFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                MainViewModel.class,
                (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider)
            .put(ProfileViewModel.class, (Provider) profileViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MBM_CPF_ProfileFragmentSubcomponentBuilder builder) {
        this.profileViewModelProvider =
            ProfileViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(ProfileFragment arg0) {
        injectProfileFragment(arg0);
      }

      private ProfileFragment injectProfileFragment(ProfileFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class MBM_CWVF_WebViewFragmentSubcomponentBuilder
        extends MainBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder {
      private WebViewFragment seedInstance;

      @Override
      public MainBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              WebViewFragment.class.getCanonicalName() + " must be set");
        }
        return new MBM_CWVF_WebViewFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(WebViewFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MBM_CWVF_WebViewFragmentSubcomponentImpl
        implements MainBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent {
      private WebviewViewModel_Factory webviewViewModelProvider;

      private MBM_CWVF_WebViewFragmentSubcomponentImpl(
          MBM_CWVF_WebViewFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                MainViewModel.class,
                (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider)
            .put(WebviewViewModel.class, (Provider) webviewViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MBM_CWVF_WebViewFragmentSubcomponentBuilder builder) {
        this.webviewViewModelProvider =
            WebviewViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(WebViewFragment arg0) {
        injectWebViewFragment(arg0);
      }

      private WebViewFragment injectWebViewFragment(WebViewFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class MBM_CCPF_ChangePasswordFragmentSubcomponentBuilder
        extends MainBuilderModule_ContributeChangePasswordFragment
            .ChangePasswordFragmentSubcomponent.Builder {
      private ChangePasswordFragment seedInstance;

      @Override
      public MainBuilderModule_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ChangePasswordFragment.class.getCanonicalName() + " must be set");
        }
        return new MBM_CCPF_ChangePasswordFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ChangePasswordFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MBM_CCPF_ChangePasswordFragmentSubcomponentImpl
        implements MainBuilderModule_ContributeChangePasswordFragment
            .ChangePasswordFragmentSubcomponent {
      private ChangePasswordViewModel_Factory changePasswordViewModelProvider;

      private MBM_CCPF_ChangePasswordFragmentSubcomponentImpl(
          MBM_CCPF_ChangePasswordFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                MainViewModel.class,
                (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider)
            .put(ChangePasswordViewModel.class, (Provider) changePasswordViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MBM_CCPF_ChangePasswordFragmentSubcomponentBuilder builder) {
        this.changePasswordViewModelProvider =
            ChangePasswordViewModel_Factory.create(
                DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(ChangePasswordFragment arg0) {
        injectChangePasswordFragment(arg0);
      }

      private ChangePasswordFragment injectChangePasswordFragment(ChangePasswordFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class MBM_CNF_NotificationsFragmentSubcomponentBuilder
        extends MainBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
            .Builder {
      private NotificationsFragment seedInstance;

      @Override
      public MainBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              NotificationsFragment.class.getCanonicalName() + " must be set");
        }
        return new MBM_CNF_NotificationsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(NotificationsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MBM_CNF_NotificationsFragmentSubcomponentImpl
        implements MainBuilderModule_ContributeNotificationsFragment
            .NotificationsFragmentSubcomponent {
      private NotificationViewModel_Factory notificationViewModelProvider;

      private MBM_CNF_NotificationsFragmentSubcomponentImpl(
          MBM_CNF_NotificationsFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                MainViewModel.class,
                (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider)
            .put(NotificationViewModel.class, (Provider) notificationViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MBM_CNF_NotificationsFragmentSubcomponentBuilder builder) {
        this.notificationViewModelProvider =
            NotificationViewModel_Factory.create(
                DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(NotificationsFragment arg0) {
        injectNotificationsFragment(arg0);
      }

      private NotificationsFragment injectNotificationsFragment(NotificationsFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }
  }

  private final class AuthActivitySubcomponentBuilder
      extends ActivityBuilderModule_ContributeAuthActivty.AuthActivitySubcomponent.Builder {
    private AuthActivity seedInstance;

    @Override
    public ActivityBuilderModule_ContributeAuthActivty.AuthActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(AuthActivity.class.getCanonicalName() + " must be set");
      }
      return new AuthActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(AuthActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AuthActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeAuthActivty.AuthActivitySubcomponent {
    private Provider<AuthBuilderModule_ContributeLoginFragment.LoginFragmentSubcomponent.Builder>
        loginFragmentSubcomponentBuilderProvider;

    private Provider<
            AuthBuilderModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Builder>
        registerFragmentSubcomponentBuilderProvider;

    private Provider<AuthBuilderModule_ContributeSplashFragment.SplashFragmentSubcomponent.Builder>
        splashFragmentSubcomponentBuilderProvider;

    private Provider<
            AuthBuilderModule_ContributeVerificationFragment.VerificationFragmentSubcomponent
                .Builder>
        verificationFragmentSubcomponentBuilderProvider;

    private Provider<
            AuthBuilderModule_ContributeForgetPasswordFragment.ForgetPasswordFragmentSubcomponent
                .Builder>
        forgetPasswordFragmentSubcomponentBuilderProvider;

    private AuthViewModel_Factory authViewModelProvider;

    private AuthActivitySubcomponentImpl(AuthActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(5)
          .put(LoginFragment.class, (Provider) loginFragmentSubcomponentBuilderProvider)
          .put(RegisterFragment.class, (Provider) registerFragmentSubcomponentBuilderProvider)
          .put(SplashFragment.class, (Provider) splashFragmentSubcomponentBuilderProvider)
          .put(
              VerificationFragment.class,
              (Provider) verificationFragmentSubcomponentBuilderProvider)
          .put(
              ForgetPasswordFragment.class,
              (Provider) forgetPasswordFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>>
        getMapOfClassOfAndProviderOfViewModel() {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(
          AuthViewModel.class, (Provider) authViewModelProvider);
    }

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AuthActivitySubcomponentBuilder builder) {
      this.loginFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthBuilderModule_ContributeLoginFragment.LoginFragmentSubcomponent.Builder>() {
            @Override
            public AuthBuilderModule_ContributeLoginFragment.LoginFragmentSubcomponent.Builder
                get() {
              return new LoginFragmentSubcomponentBuilder();
            }
          };
      this.registerFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthBuilderModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Builder>() {
            @Override
            public AuthBuilderModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Builder
                get() {
              return new RegisterFragmentSubcomponentBuilder();
            }
          };
      this.splashFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthBuilderModule_ContributeSplashFragment.SplashFragmentSubcomponent.Builder>() {
            @Override
            public AuthBuilderModule_ContributeSplashFragment.SplashFragmentSubcomponent.Builder
                get() {
              return new SplashFragmentSubcomponentBuilder();
            }
          };
      this.verificationFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthBuilderModule_ContributeVerificationFragment.VerificationFragmentSubcomponent
                  .Builder>() {
            @Override
            public AuthBuilderModule_ContributeVerificationFragment.VerificationFragmentSubcomponent
                    .Builder
                get() {
              return new VerificationFragmentSubcomponentBuilder();
            }
          };
      this.forgetPasswordFragmentSubcomponentBuilderProvider =
          new Provider<
              AuthBuilderModule_ContributeForgetPasswordFragment.ForgetPasswordFragmentSubcomponent
                  .Builder>() {
            @Override
            public AuthBuilderModule_ContributeForgetPasswordFragment
                    .ForgetPasswordFragmentSubcomponent.Builder
                get() {
              return new ForgetPasswordFragmentSubcomponentBuilder();
            }
          };
      this.authViewModelProvider =
          AuthViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);
    }

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
      return instance;
    }

    private final class LoginFragmentSubcomponentBuilder
        extends AuthBuilderModule_ContributeLoginFragment.LoginFragmentSubcomponent.Builder {
      private LoginFragment seedInstance;

      @Override
      public AuthBuilderModule_ContributeLoginFragment.LoginFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(LoginFragment.class.getCanonicalName() + " must be set");
        }
        return new LoginFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(LoginFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class LoginFragmentSubcomponentImpl
        implements AuthBuilderModule_ContributeLoginFragment.LoginFragmentSubcomponent {
      private LoginViewModel_Factory loginViewModelProvider;

      private LoginFragmentSubcomponentImpl(LoginFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                AuthViewModel.class,
                (Provider) AuthActivitySubcomponentImpl.this.authViewModelProvider)
            .put(LoginViewModel.class, (Provider) loginViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final LoginFragmentSubcomponentBuilder builder) {
        this.loginViewModelProvider =
            LoginViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(LoginFragment arg0) {
        injectLoginFragment(arg0);
      }

      private LoginFragment injectLoginFragment(LoginFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class RegisterFragmentSubcomponentBuilder
        extends AuthBuilderModule_ContributeRegisterFragment.RegisterFragmentSubcomponent.Builder {
      private RegisterFragment seedInstance;

      @Override
      public AuthBuilderModule_ContributeRegisterFragment.RegisterFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              RegisterFragment.class.getCanonicalName() + " must be set");
        }
        return new RegisterFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(RegisterFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class RegisterFragmentSubcomponentImpl
        implements AuthBuilderModule_ContributeRegisterFragment.RegisterFragmentSubcomponent {
      private RegisterViewModel_Factory registerViewModelProvider;

      private RegisterFragmentSubcomponentImpl(RegisterFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                AuthViewModel.class,
                (Provider) AuthActivitySubcomponentImpl.this.authViewModelProvider)
            .put(RegisterViewModel.class, (Provider) registerViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final RegisterFragmentSubcomponentBuilder builder) {
        this.registerViewModelProvider =
            RegisterViewModel_Factory.create(
                DaggerAppComponent.this.provideMockRepositoryProvider,
                DaggerAppComponent.this.provideTSessionManagerProvider);
      }

      @Override
      public void inject(RegisterFragment arg0) {
        injectRegisterFragment(arg0);
      }

      private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class SplashFragmentSubcomponentBuilder
        extends AuthBuilderModule_ContributeSplashFragment.SplashFragmentSubcomponent.Builder {
      private SplashFragment seedInstance;

      @Override
      public AuthBuilderModule_ContributeSplashFragment.SplashFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(SplashFragment.class.getCanonicalName() + " must be set");
        }
        return new SplashFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SplashFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SplashFragmentSubcomponentImpl
        implements AuthBuilderModule_ContributeSplashFragment.SplashFragmentSubcomponent {
      private SplashViewModel_Factory splashViewModelProvider;

      private SplashFragmentSubcomponentImpl(SplashFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                AuthViewModel.class,
                (Provider) AuthActivitySubcomponentImpl.this.authViewModelProvider)
            .put(SplashViewModel.class, (Provider) splashViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final SplashFragmentSubcomponentBuilder builder) {
        this.splashViewModelProvider =
            SplashViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(SplashFragment arg0) {
        injectSplashFragment(arg0);
      }

      private SplashFragment injectSplashFragment(SplashFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        SplashFragment_MembersInjector.injectSessionManager(
            instance, DaggerAppComponent.this.provideTSessionManagerProvider.get());
        return instance;
      }
    }

    private final class VerificationFragmentSubcomponentBuilder
        extends AuthBuilderModule_ContributeVerificationFragment.VerificationFragmentSubcomponent
            .Builder {
      private VerificationFragment seedInstance;

      @Override
      public AuthBuilderModule_ContributeVerificationFragment.VerificationFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              VerificationFragment.class.getCanonicalName() + " must be set");
        }
        return new VerificationFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(VerificationFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class VerificationFragmentSubcomponentImpl
        implements AuthBuilderModule_ContributeVerificationFragment
            .VerificationFragmentSubcomponent {
      private VerificationViewModel_Factory verificationViewModelProvider;

      private VerificationFragmentSubcomponentImpl(
          VerificationFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                AuthViewModel.class,
                (Provider) AuthActivitySubcomponentImpl.this.authViewModelProvider)
            .put(VerificationViewModel.class, (Provider) verificationViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final VerificationFragmentSubcomponentBuilder builder) {
        this.verificationViewModelProvider =
            VerificationViewModel_Factory.create(
                DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(VerificationFragment arg0) {
        injectVerificationFragment(arg0);
      }

      private VerificationFragment injectVerificationFragment(VerificationFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class ForgetPasswordFragmentSubcomponentBuilder
        extends AuthBuilderModule_ContributeForgetPasswordFragment
            .ForgetPasswordFragmentSubcomponent.Builder {
      private ForgetPasswordFragment seedInstance;

      @Override
      public AuthBuilderModule_ContributeForgetPasswordFragment.ForgetPasswordFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ForgetPasswordFragment.class.getCanonicalName() + " must be set");
        }
        return new ForgetPasswordFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ForgetPasswordFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ForgetPasswordFragmentSubcomponentImpl
        implements AuthBuilderModule_ContributeForgetPasswordFragment
            .ForgetPasswordFragmentSubcomponent {
      private ForgetPasswordViewModel_Factory forgetPasswordViewModelProvider;

      private ForgetPasswordFragmentSubcomponentImpl(
          ForgetPasswordFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                AuthViewModel.class,
                (Provider) AuthActivitySubcomponentImpl.this.authViewModelProvider)
            .put(ForgetPasswordViewModel.class, (Provider) forgetPasswordViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ForgetPasswordFragmentSubcomponentBuilder builder) {
        this.forgetPasswordViewModelProvider =
            ForgetPasswordViewModel_Factory.create(
                DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(ForgetPasswordFragment arg0) {
        injectForgetPasswordFragment(arg0);
      }

      private ForgetPasswordFragment injectForgetPasswordFragment(ForgetPasswordFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }
  }

  private final class PagerActivitySubcomponentBuilder
      extends ActivityBuilderModule_ContributePagerActivity.PagerActivitySubcomponent.Builder {
    private PagerActivity seedInstance;

    @Override
    public ActivityBuilderModule_ContributePagerActivity.PagerActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(PagerActivity.class.getCanonicalName() + " must be set");
      }
      return new PagerActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PagerActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PagerActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributePagerActivity.PagerActivitySubcomponent {
    private Provider<PagerBuilderModule_ContributeLeftFragment.LeftFragmentSubcomponent.Builder>
        leftFragmentSubcomponentBuilderProvider;

    private Provider<PagerBuilderModule_ContributeRightFragment.RightFragmentSubcomponent.Builder>
        rightFragmentSubcomponentBuilderProvider;

    private Provider<PagerBuilderModule_ContributeCenterFragment.CenterFragmentSubcomponent.Builder>
        centerFragmentSubcomponentBuilderProvider;

    private Provider<PagerBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder>
        homeFragmentSubcomponentBuilderProvider;

    private Provider<PagerBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder>
        jobFragmentSubcomponentBuilderProvider;

    private Provider<
            PagerBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder>
        settingFragmentSubcomponentBuilderProvider;

    private Provider<
            PagerBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder>
        profileFragmentSubcomponentBuilderProvider;

    private Provider<
            PagerBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder>
        webViewFragmentSubcomponentBuilderProvider;

    private Provider<
            PagerBuilderModule_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
                .Builder>
        changePasswordFragmentSubcomponentBuilderProvider;

    private Provider<
            PagerBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
                .Builder>
        notificationsFragmentSubcomponentBuilderProvider;

    private PagerViewModel_Factory pagerViewModelProvider;

    private PagerActivitySubcomponentImpl(PagerActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(10)
          .put(LeftFragment.class, (Provider) leftFragmentSubcomponentBuilderProvider)
          .put(RightFragment.class, (Provider) rightFragmentSubcomponentBuilderProvider)
          .put(CenterFragment.class, (Provider) centerFragmentSubcomponentBuilderProvider)
          .put(HomeFragment.class, (Provider) homeFragmentSubcomponentBuilderProvider)
          .put(JobFragment.class, (Provider) jobFragmentSubcomponentBuilderProvider)
          .put(SettingFragment.class, (Provider) settingFragmentSubcomponentBuilderProvider)
          .put(ProfileFragment.class, (Provider) profileFragmentSubcomponentBuilderProvider)
          .put(WebViewFragment.class, (Provider) webViewFragmentSubcomponentBuilderProvider)
          .put(
              ChangePasswordFragment.class,
              (Provider) changePasswordFragmentSubcomponentBuilderProvider)
          .put(
              NotificationsFragment.class,
              (Provider) notificationsFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>>
        getMapOfClassOfAndProviderOfViewModel() {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(
          PagerViewModel.class, (Provider) pagerViewModelProvider);
    }

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PagerActivitySubcomponentBuilder builder) {
      this.leftFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeLeftFragment.LeftFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeLeftFragment.LeftFragmentSubcomponent.Builder
                get() {
              return new LeftFragmentSubcomponentBuilder();
            }
          };
      this.rightFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeRightFragment.RightFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeRightFragment.RightFragmentSubcomponent.Builder
                get() {
              return new RightFragmentSubcomponentBuilder();
            }
          };
      this.centerFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeCenterFragment.CenterFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeCenterFragment.CenterFragmentSubcomponent.Builder
                get() {
              return new CenterFragmentSubcomponentBuilder();
            }
          };
      this.homeFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder
                get() {
              return new PBM_CHF_HomeFragmentSubcomponentBuilder();
            }
          };
      this.jobFragmentSubcomponentBuilderProvider =
          new Provider<PagerBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder get() {
              return new PBM_CJF_JobFragmentSubcomponentBuilder();
            }
          };
      this.settingFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder
                get() {
              return new PBM_CSF_SettingFragmentSubcomponentBuilder();
            }
          };
      this.profileFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder
                get() {
              return new PBM_CPF_ProfileFragmentSubcomponentBuilder();
            }
          };
      this.webViewFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder>() {
            @Override
            public PagerBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder
                get() {
              return new PBM_CWVF_WebViewFragmentSubcomponentBuilder();
            }
          };
      this.changePasswordFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
                  .Builder>() {
            @Override
            public PagerBuilderModule_ContributeChangePasswordFragment
                    .ChangePasswordFragmentSubcomponent.Builder
                get() {
              return new PBM_CCPF_ChangePasswordFragmentSubcomponentBuilder();
            }
          };
      this.notificationsFragmentSubcomponentBuilderProvider =
          new Provider<
              PagerBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
                  .Builder>() {
            @Override
            public PagerBuilderModule_ContributeNotificationsFragment
                    .NotificationsFragmentSubcomponent.Builder
                get() {
              return new PBM_CNF_NotificationsFragmentSubcomponentBuilder();
            }
          };
      this.pagerViewModelProvider =
          PagerViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
    }

    @Override
    public void inject(PagerActivity arg0) {
      injectPagerActivity(arg0);
    }

    private PagerActivity injectPagerActivity(PagerActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
      return instance;
    }

    private final class LeftFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeLeftFragment.LeftFragmentSubcomponent.Builder {
      private LeftFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeLeftFragment.LeftFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(LeftFragment.class.getCanonicalName() + " must be set");
        }
        return new LeftFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(LeftFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class LeftFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeLeftFragment.LeftFragmentSubcomponent {
      private LeftViewModel_Factory leftViewModelProvider;

      private LeftFragmentSubcomponentImpl(LeftFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(LeftViewModel.class, (Provider) leftViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final LeftFragmentSubcomponentBuilder builder) {
        this.leftViewModelProvider =
            LeftViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(LeftFragment arg0) {
        injectLeftFragment(arg0);
      }

      private LeftFragment injectLeftFragment(LeftFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class RightFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeRightFragment.RightFragmentSubcomponent.Builder {
      private RightFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeRightFragment.RightFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(RightFragment.class.getCanonicalName() + " must be set");
        }
        return new RightFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(RightFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class RightFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeRightFragment.RightFragmentSubcomponent {
      private RightViewModel_Factory rightViewModelProvider;

      private RightFragmentSubcomponentImpl(RightFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(RightViewModel.class, (Provider) rightViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final RightFragmentSubcomponentBuilder builder) {
        this.rightViewModelProvider =
            RightViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(RightFragment arg0) {
        injectRightFragment(arg0);
      }

      private RightFragment injectRightFragment(RightFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class CenterFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeCenterFragment.CenterFragmentSubcomponent.Builder {
      private CenterFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeCenterFragment.CenterFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(CenterFragment.class.getCanonicalName() + " must be set");
        }
        return new CenterFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(CenterFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class CenterFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeCenterFragment.CenterFragmentSubcomponent {
      private CenterViewModel_Factory centerViewModelProvider;

      private CenterFragmentSubcomponentImpl(CenterFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(CenterViewModel.class, (Provider) centerViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final CenterFragmentSubcomponentBuilder builder) {
        this.centerViewModelProvider =
            CenterViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(CenterFragment arg0) {
        injectCenterFragment(arg0);
      }

      private CenterFragment injectCenterFragment(CenterFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class PBM_CHF_HomeFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder {
      private HomeFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(HomeFragment.class.getCanonicalName() + " must be set");
        }
        return new PBM_CHF_HomeFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(HomeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PBM_CHF_HomeFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeHomeFragment.HomeFragmentSubcomponent {
      private HomeViewModel_Factory homeViewModelProvider;

      private PBM_CHF_HomeFragmentSubcomponentImpl(
          PBM_CHF_HomeFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(HomeViewModel.class, (Provider) homeViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PBM_CHF_HomeFragmentSubcomponentBuilder builder) {
        this.homeViewModelProvider =
            HomeViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);
      }

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class PBM_CJF_JobFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeJobFragment.JobFragmentSubcomponent.Builder {
      private JobFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeJobFragment.JobFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(JobFragment.class.getCanonicalName() + " must be set");
        }
        return new PBM_CJF_JobFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(JobFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PBM_CJF_JobFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeJobFragment.JobFragmentSubcomponent {
      private JobViewModel_Factory jobViewModelProvider;

      private PBM_CJF_JobFragmentSubcomponentImpl(PBM_CJF_JobFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(JobViewModel.class, (Provider) jobViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PBM_CJF_JobFragmentSubcomponentBuilder builder) {
        this.jobViewModelProvider =
            JobViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(JobFragment arg0) {
        injectJobFragment(arg0);
      }

      private JobFragment injectJobFragment(JobFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class PBM_CSF_SettingFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent.Builder {
      private SettingFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SettingFragment.class.getCanonicalName() + " must be set");
        }
        return new PBM_CSF_SettingFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SettingFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PBM_CSF_SettingFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeSettingFragment.SettingFragmentSubcomponent {
      private SettingViewModel_Factory settingViewModelProvider;

      private PBM_CSF_SettingFragmentSubcomponentImpl(
          PBM_CSF_SettingFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(SettingViewModel.class, (Provider) settingViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PBM_CSF_SettingFragmentSubcomponentBuilder builder) {
        this.settingViewModelProvider =
            SettingViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(SettingFragment arg0) {
        injectSettingFragment(arg0);
      }

      private SettingFragment injectSettingFragment(SettingFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class PBM_CPF_ProfileFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent.Builder {
      private ProfileFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ProfileFragment.class.getCanonicalName() + " must be set");
        }
        return new PBM_CPF_ProfileFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ProfileFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PBM_CPF_ProfileFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeProfileFragment.ProfileFragmentSubcomponent {
      private ProfileViewModel_Factory profileViewModelProvider;

      private PBM_CPF_ProfileFragmentSubcomponentImpl(
          PBM_CPF_ProfileFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(ProfileViewModel.class, (Provider) profileViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PBM_CPF_ProfileFragmentSubcomponentBuilder builder) {
        this.profileViewModelProvider =
            ProfileViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(ProfileFragment arg0) {
        injectProfileFragment(arg0);
      }

      private ProfileFragment injectProfileFragment(ProfileFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class PBM_CWVF_WebViewFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent.Builder {
      private WebViewFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              WebViewFragment.class.getCanonicalName() + " must be set");
        }
        return new PBM_CWVF_WebViewFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(WebViewFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PBM_CWVF_WebViewFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeWebViewFragment.WebViewFragmentSubcomponent {
      private WebviewViewModel_Factory webviewViewModelProvider;

      private PBM_CWVF_WebViewFragmentSubcomponentImpl(
          PBM_CWVF_WebViewFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(WebviewViewModel.class, (Provider) webviewViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PBM_CWVF_WebViewFragmentSubcomponentBuilder builder) {
        this.webviewViewModelProvider =
            WebviewViewModel_Factory.create(DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(WebViewFragment arg0) {
        injectWebViewFragment(arg0);
      }

      private WebViewFragment injectWebViewFragment(WebViewFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class PBM_CCPF_ChangePasswordFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeChangePasswordFragment
            .ChangePasswordFragmentSubcomponent.Builder {
      private ChangePasswordFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeChangePasswordFragment.ChangePasswordFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ChangePasswordFragment.class.getCanonicalName() + " must be set");
        }
        return new PBM_CCPF_ChangePasswordFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ChangePasswordFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PBM_CCPF_ChangePasswordFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeChangePasswordFragment
            .ChangePasswordFragmentSubcomponent {
      private ChangePasswordViewModel_Factory changePasswordViewModelProvider;

      private PBM_CCPF_ChangePasswordFragmentSubcomponentImpl(
          PBM_CCPF_ChangePasswordFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(ChangePasswordViewModel.class, (Provider) changePasswordViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PBM_CCPF_ChangePasswordFragmentSubcomponentBuilder builder) {
        this.changePasswordViewModelProvider =
            ChangePasswordViewModel_Factory.create(
                DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(ChangePasswordFragment arg0) {
        injectChangePasswordFragment(arg0);
      }

      private ChangePasswordFragment injectChangePasswordFragment(ChangePasswordFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class PBM_CNF_NotificationsFragmentSubcomponentBuilder
        extends PagerBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
            .Builder {
      private NotificationsFragment seedInstance;

      @Override
      public PagerBuilderModule_ContributeNotificationsFragment.NotificationsFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              NotificationsFragment.class.getCanonicalName() + " must be set");
        }
        return new PBM_CNF_NotificationsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(NotificationsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class PBM_CNF_NotificationsFragmentSubcomponentImpl
        implements PagerBuilderModule_ContributeNotificationsFragment
            .NotificationsFragmentSubcomponent {
      private NotificationViewModel_Factory notificationViewModelProvider;

      private PBM_CNF_NotificationsFragmentSubcomponentImpl(
          PBM_CNF_NotificationsFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(
                PagerViewModel.class,
                (Provider) PagerActivitySubcomponentImpl.this.pagerViewModelProvider)
            .put(NotificationViewModel.class, (Provider) notificationViewModelProvider)
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final PBM_CNF_NotificationsFragmentSubcomponentBuilder builder) {
        this.notificationViewModelProvider =
            NotificationViewModel_Factory.create(
                DaggerAppComponent.this.provideMockRepositoryProvider);
      }

      @Override
      public void inject(NotificationsFragment arg0) {
        injectNotificationsFragment(arg0);
      }

      private NotificationsFragment injectNotificationsFragment(NotificationsFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, PagerActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        BaseFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }
  }
}
