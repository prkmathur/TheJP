// Generated by Dagger (https://google.github.io/dagger).
package com.app.thenhpattern.di.modules;

import android.content.SharedPreferences;
import com.app.thenhpattern.util.SessionManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideTSessionManagerFactory implements Factory<SessionManager> {
  private final AppModule module;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  public AppModule_ProvideTSessionManagerFactory(
      AppModule module, Provider<SharedPreferences> sharedPreferencesProvider) {
    this.module = module;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  @Override
  public SessionManager get() {
    return provideInstance(module, sharedPreferencesProvider);
  }

  public static SessionManager provideInstance(
      AppModule module, Provider<SharedPreferences> sharedPreferencesProvider) {
    return proxyProvideTSessionManager(module, sharedPreferencesProvider.get());
  }

  public static AppModule_ProvideTSessionManagerFactory create(
      AppModule module, Provider<SharedPreferences> sharedPreferencesProvider) {
    return new AppModule_ProvideTSessionManagerFactory(module, sharedPreferencesProvider);
  }

  public static SessionManager proxyProvideTSessionManager(
      AppModule instance, SharedPreferences sharedPreferences) {
    return Preconditions.checkNotNull(
        instance.provideTSessionManager(sharedPreferences),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
