// Generated by Dagger (https://google.github.io/dagger).
package com.app.thenhpattern.viewmodel;

import com.app.thenhpattern.model.remote.DataSource;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class AuthViewModel_Factory implements Factory<AuthViewModel> {
  private final Provider<DataSource> dataSourceProvider;

  public AuthViewModel_Factory(Provider<DataSource> dataSourceProvider) {
    this.dataSourceProvider = dataSourceProvider;
  }

  @Override
  public AuthViewModel get() {
    return provideInstance(dataSourceProvider);
  }

  public static AuthViewModel provideInstance(Provider<DataSource> dataSourceProvider) {
    return new AuthViewModel(dataSourceProvider.get());
  }

  public static AuthViewModel_Factory create(Provider<DataSource> dataSourceProvider) {
    return new AuthViewModel_Factory(dataSourceProvider);
  }

  public static AuthViewModel newAuthViewModel(DataSource dataSource) {
    return new AuthViewModel(dataSource);
  }
}
