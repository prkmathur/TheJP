// Generated by Dagger (https://google.github.io/dagger).
package com.app.thenhpattern.di.modules;

import android.content.SharedPreferences;
import com.app.thenhpattern.MyApplication;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideSharedPreferencesFactory implements Factory<SharedPreferences> {
  private final AppModule module;

  private final Provider<MyApplication> applicationProvider;

  public AppModule_ProvideSharedPreferencesFactory(
      AppModule module, Provider<MyApplication> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public SharedPreferences get() {
    return provideInstance(module, applicationProvider);
  }

  public static SharedPreferences provideInstance(
      AppModule module, Provider<MyApplication> applicationProvider) {
    return proxyProvideSharedPreferences(module, applicationProvider.get());
  }

  public static AppModule_ProvideSharedPreferencesFactory create(
      AppModule module, Provider<MyApplication> applicationProvider) {
    return new AppModule_ProvideSharedPreferencesFactory(module, applicationProvider);
  }

  public static SharedPreferences proxyProvideSharedPreferences(
      AppModule instance, MyApplication application) {
    return Preconditions.checkNotNull(
        instance.provideSharedPreferences(application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
